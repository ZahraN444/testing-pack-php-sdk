<?php

declare(strict_types=1);

/*
 * MistAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace MistAPILib\Tests\Controllers;

use Core\TestCase\BodyMatchers\KeysBodyMatcher;
use Core\TestCase\TestParam;
use MistAPILib\Controllers\OrgsNACTagsController;
use MistAPILib\Exceptions;

class OrgsNACTagsControllerTest extends BaseTestController
{
    /**
     * @var OrgsNACTagsController OrgsNACTagsController instance
     */
    protected static $controller;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$controller = parent::getClient()->getOrgsNACTagsController();
    }

    public function testListOrgNacTags()
    {
        // Parameters for the API call
        $orgId = '000000ab-00ab-00ab-00ab-0000000000ab';
        $type = null;
        $name = null;
        $match = null;
        $page = 1;
        $limit = 100;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->listOrgNacTags($orgId, $type, $name, $match, $page, $limit);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)->expectStatus(200)->allowExtraHeaders()->expectHeaders($headers)->assert();
    }

    public function testCreateOrgNacTag()
    {
        // Parameters for the API call
        $orgId = '000000ab-00ab-00ab-00ab-0000000000ab';
        $body = null;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->createOrgNacTag($orgId, $body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                '{"match":"client_mac","name":"cameras","type":"match","values":["010203040506","abcdef*"]}'
            )))
            ->assert();
    }

    public function testDeleteOrgNacTag()
    {
        // Parameters for the API call
        $orgId = '000000ab-00ab-00ab-00ab-0000000000ab';
        $nactagId = '000000ab-00ab-00ab-00ab-0000000000ab';

        // Perform API call
        try {
            self::$controller->deleteOrgNacTag($orgId, $nactagId);
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase(null)->expectStatus(200)->assert();
    }

    public function testGetOrgNacTag()
    {
        // Parameters for the API call
        $orgId = '000000ab-00ab-00ab-00ab-0000000000ab';
        $nactagId = '000000ab-00ab-00ab-00ab-0000000000ab';

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->getOrgNacTag($orgId, $nactagId);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                '{"match":"client_mac","name":"cameras","type":"match","values":["010203040506","abcdef*"]}'
            )))
            ->assert();
    }

    public function testUpdateOrgNacTag()
    {
        // Parameters for the API call
        $orgId = '000000ab-00ab-00ab-00ab-0000000000ab';
        $nactagId = '000000ab-00ab-00ab-00ab-0000000000ab';
        $body = null;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->updateOrgNacTag($orgId, $nactagId, $body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                '{"match":"client_mac","name":"cameras","type":"match","values":["010203040506","abcdef*"]}'
            )))
            ->assert();
    }
}
