<?php

declare(strict_types=1);

/*
 * MistAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace MistAPILib\Authentication;

use Core\Authentication\CoreAuth;
use MistAPILib\ConfigurationDefaults;
use Core\Request\Parameters\HeaderParam;

/**
 * Utility class for authorization and token management.
 */
class CsrfTokenManager extends CoreAuth implements CsrfTokenCredentials
{
    /**
     * @var array
     */
    private $config;

    public function __construct(array $config)
    {
        $this->config = $config;
        parent::__construct(HeaderParam::init('X-CSRFToken', $this->getXCSRFToken())->requiredNonEmpty());
    }

    /**
     * String value for xCSRFToken.
     */
    public function getXCSRFToken(): string
    {
        return $this->config['xCSRFToken'] ?? ConfigurationDefaults::X_CSRF_TOKEN;
    }

    /**
     * Checks if provided credentials match with existing ones.
     *
     * @param string $xCSRFToken This protects the website against [Cross Site Request
     *        Forgery](http://en.wikipedia.org/wiki/Cross-site_request_forgery), all the POST /
     *        PUT / DELETE APIs needs to have CSRF token in the AJAX Request header when using
     *        Login/Password authentication (with or without MFA)
     *
     *
     *        The CSRF Token is sent back by Mist in the Cookies from the Login Response API Call:
     *        `cookies[csrftoken]`
     *
     *        The CSRF Token must be added in the HTTP Request Headers:
     *        ```
     *        X-CSRFToken: vwvBuq9qkqaKh7lu8tNc0gkvBfEaLAmx
     *        ```
     */
    public function equals(string $xCSRFToken): bool
    {
        return $xCSRFToken == $this->getXCSRFToken();
    }
}
