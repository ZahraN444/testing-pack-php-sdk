<?php

declare(strict_types=1);

/*
 * MistAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace MistAPILib\Controllers;

use Core\Authentication\Auth;
use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use MistAPILib\Exceptions\ApiException;
use MistAPILib\Exceptions\ApiV1OrgsNactags400ErrorException;
use MistAPILib\Exceptions\ApiV1OrgsNactags401ErrorException;
use MistAPILib\Exceptions\ApiV1OrgsNactags403ErrorException;
use MistAPILib\Exceptions\ApiV1OrgsNactags429ErrorException;
use MistAPILib\Exceptions\ResponseHttp404Exception;
use MistAPILib\Models\NacTag;

class OrgsNACTagsController extends BaseController
{
    /**
     * Get Org NAC Tag
     *
     * @param string $orgId
     * @param string $nactagId
     *
     * @return NacTag Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getOrgNacTag(string $orgId, string $nactagId): NacTag
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/api/v1/orgs/{org_id}/nactags/{nactag_id}')
            ->auth('apiToken', 'basicAuth', Auth::and('basicAuth', 'csrfToken'))
            ->parameters(TemplateParam::init('org_id', $orgId), TemplateParam::init('nactag_id', $nactagId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Syntax', ApiV1OrgsNactags400ErrorException::class))
            ->throwErrorOn('401', ErrorType::init('Unauthorized', ApiV1OrgsNactags401ErrorException::class))
            ->throwErrorOn('403', ErrorType::init('Permission Denied', ApiV1OrgsNactags403ErrorException::class))
            ->throwErrorOn(
                '404',
                ErrorType::init(
                    'Not found. The API endpoint doesnâ€™t exist or resource doesnâ€™ t exist',
                    ResponseHttp404Exception::class
                )
            )
            ->throwErrorOn(
                '429',
                ErrorType::init(
                    'Too Many Request. The API Token used for the request reached the 5000 API ' .
                    'Calls per hour threshold',
                    ApiV1OrgsNactags429ErrorException::class
                )
            )
            ->type(NacTag::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Get List of Org NAC Tags
     *
     * @param string $orgId
     * @param string|null $type Type of NAC Tag
     * @param string|null $name Name of NAC Tag
     * @param string|null $match Type of NAC Tag
     * @param int|null $page
     * @param int|null $limit
     *
     * @return NacTag[] Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function listOrgNacTags(
        string $orgId,
        ?string $type = null,
        ?string $name = null,
        ?string $match = null,
        ?int $page = 1,
        ?int $limit = 100
    ): array {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/api/v1/orgs/{org_id}/nactags')
            ->auth('apiToken', 'basicAuth', Auth::and('basicAuth', 'csrfToken'))
            ->parameters(
                TemplateParam::init('org_id', $orgId),
                QueryParam::init('type', $type),
                QueryParam::init('name', $name),
                QueryParam::init('match', $match),
                QueryParam::init('page', $page),
                QueryParam::init('limit', $limit)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Syntax', ApiV1OrgsNactags400ErrorException::class))
            ->throwErrorOn('401', ErrorType::init('Unauthorized', ApiV1OrgsNactags401ErrorException::class))
            ->throwErrorOn('403', ErrorType::init('Permission Denied', ApiV1OrgsNactags403ErrorException::class))
            ->throwErrorOn(
                '404',
                ErrorType::init(
                    'Not found. The API endpoint doesnâ€™t exist or resource doesnâ€™ t exist',
                    ResponseHttp404Exception::class
                )
            )
            ->throwErrorOn(
                '429',
                ErrorType::init(
                    'Too Many Request. The API Token used for the request reached the 5000 API ' .
                    'Calls per hour threshold',
                    ApiV1OrgsNactags429ErrorException::class
                )
            )
            ->type(NacTag::class, 1);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Delete Org NAC Tag
     *
     * @param string $orgId
     * @param string $nactagId
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function deleteOrgNacTag(string $orgId, string $nactagId): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/api/v1/orgs/{org_id}/nactags/{nactag_id}')
            ->auth('apiToken', 'basicAuth', Auth::and('basicAuth', 'csrfToken'))
            ->parameters(TemplateParam::init('org_id', $orgId), TemplateParam::init('nactag_id', $nactagId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Syntax', ApiV1OrgsNactags400ErrorException::class))
            ->throwErrorOn('401', ErrorType::init('Unauthorized', ApiV1OrgsNactags401ErrorException::class))
            ->throwErrorOn('403', ErrorType::init('Permission Denied', ApiV1OrgsNactags403ErrorException::class))
            ->throwErrorOn(
                '404',
                ErrorType::init(
                    'Not found. The API endpoint doesnâ€™t exist or resource doesnâ€™ t exist',
                    ResponseHttp404Exception::class
                )
            )
            ->throwErrorOn(
                '429',
                ErrorType::init(
                    'Too Many Request. The API Token used for the request reached the 5000 API ' .
                    'Calls per hour threshold',
                    ApiV1OrgsNactags429ErrorException::class
                )
            );

        $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Update Org NAC Tag
     *
     * @param string $orgId
     * @param string $nactagId
     * @param NacTag|null $body
     *
     * @return NacTag Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function updateOrgNacTag(string $orgId, string $nactagId, ?NacTag $body = null): NacTag
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/api/v1/orgs/{org_id}/nactags/{nactag_id}')
            ->auth('apiToken', 'basicAuth', Auth::and('basicAuth', 'csrfToken'))
            ->parameters(
                TemplateParam::init('org_id', $orgId),
                TemplateParam::init('nactag_id', $nactagId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Syntax', ApiV1OrgsNactags400ErrorException::class))
            ->throwErrorOn('401', ErrorType::init('Unauthorized', ApiV1OrgsNactags401ErrorException::class))
            ->throwErrorOn('403', ErrorType::init('Permission Denied', ApiV1OrgsNactags403ErrorException::class))
            ->throwErrorOn(
                '404',
                ErrorType::init(
                    'Not found. The API endpoint doesnâ€™t exist or resource doesnâ€™ t exist',
                    ResponseHttp404Exception::class
                )
            )
            ->throwErrorOn(
                '429',
                ErrorType::init(
                    'Too Many Request. The API Token used for the request reached the 5000 API ' .
                    'Calls per hour threshold',
                    ApiV1OrgsNactags429ErrorException::class
                )
            )
            ->type(NacTag::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create Org NAC Tag
     *
     * @param string $orgId
     * @param NacTag|null $body
     *
     * @return NacTag Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createOrgNacTag(string $orgId, ?NacTag $body = null): NacTag
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/api/v1/orgs/{org_id}/nactags')
            ->auth('apiToken', 'basicAuth', Auth::and('basicAuth', 'csrfToken'))
            ->parameters(
                TemplateParam::init('org_id', $orgId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Syntax', ApiV1OrgsNactags400ErrorException::class))
            ->throwErrorOn('401', ErrorType::init('Unauthorized', ApiV1OrgsNactags401ErrorException::class))
            ->throwErrorOn('403', ErrorType::init('Permission Denied', ApiV1OrgsNactags403ErrorException::class))
            ->throwErrorOn(
                '404',
                ErrorType::init(
                    'Not found. The API endpoint doesnâ€™t exist or resource doesnâ€™ t exist',
                    ResponseHttp404Exception::class
                )
            )
            ->throwErrorOn(
                '429',
                ErrorType::init(
                    'Too Many Request. The API Token used for the request reached the 5000 API ' .
                    'Calls per hour threshold',
                    ApiV1OrgsNactags429ErrorException::class
                )
            )
            ->type(NacTag::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
