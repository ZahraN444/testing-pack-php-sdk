<?php

declare(strict_types=1);

/*
 * MistAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace MistAPILib\Controllers;

use Core\Authentication\Auth;
use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\FormParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use MistAPILib\Exceptions\ApiException;
use MistAPILib\Exceptions\ApiV1OrgsNacportals400ErrorException;
use MistAPILib\Exceptions\ApiV1OrgsNacportals401ErrorException;
use MistAPILib\Exceptions\ApiV1OrgsNacportals403ErrorException;
use MistAPILib\Exceptions\ApiV1OrgsNacportals429ErrorException;
use MistAPILib\Exceptions\ApiV1OrgsNacportalsFailures400ErrorException;
use MistAPILib\Exceptions\ApiV1OrgsNacportalsFailures401ErrorException;
use MistAPILib\Exceptions\ApiV1OrgsNacportalsFailures403ErrorException;
use MistAPILib\Exceptions\ApiV1OrgsNacportalsFailures429ErrorException;
use MistAPILib\Exceptions\ApiV1OrgsNacportalsPortalImage400ErrorException;
use MistAPILib\Exceptions\ApiV1OrgsNacportalsPortalImage401ErrorException;
use MistAPILib\Exceptions\ApiV1OrgsNacportalsPortalImage403ErrorException;
use MistAPILib\Exceptions\ApiV1OrgsNacportalsPortalImage429ErrorException;
use MistAPILib\Exceptions\ApiV1OrgsNacportalsPortalTemplate400ErrorException;
use MistAPILib\Exceptions\ApiV1OrgsNacportalsPortalTemplate401ErrorException;
use MistAPILib\Exceptions\ApiV1OrgsNacportalsPortalTemplate403ErrorException;
use MistAPILib\Exceptions\ApiV1OrgsNacportalsPortalTemplate429ErrorException;
use MistAPILib\Exceptions\ResponseHttp404Exception;
use MistAPILib\Models\NacPortal;
use MistAPILib\Models\NacPortalTemplate;
use MistAPILib\Models\ResponseSsoFailureSearch;
use MistAPILib\Utils\FileWrapper;

class OrgsNACPortalsController extends BaseController
{
    /**
     * List Org NAC Portals
     *
     * @param string $orgId
     * @param int|null $page
     * @param int|null $limit
     *
     * @return NacPortal[] Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function listOrgNacPortals(string $orgId, ?int $page = 1, ?int $limit = 100): array
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/api/v1/orgs/{org_id}/nacportals')
            ->auth('apiToken', 'basicAuth', Auth::and('basicAuth', 'csrfToken'))
            ->parameters(
                TemplateParam::init('org_id', $orgId),
                QueryParam::init('page', $page),
                QueryParam::init('limit', $limit)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Syntax', ApiV1OrgsNacportals400ErrorException::class))
            ->throwErrorOn('401', ErrorType::init('Unauthorized', ApiV1OrgsNacportals401ErrorException::class))
            ->throwErrorOn(
                '403',
                ErrorType::init('Permission Denied', ApiV1OrgsNacportals403ErrorException::class)
            )
            ->throwErrorOn(
                '404',
                ErrorType::init(
                    'Not found. The API endpoint doesnâ€™t exist or resource doesnâ€™ t exist',
                    ResponseHttp404Exception::class
                )
            )
            ->throwErrorOn(
                '429',
                ErrorType::init(
                    'Too Many Request. The API Token used for the request reached the 5000 API ' .
                    'Calls per hour threshold',
                    ApiV1OrgsNacportals429ErrorException::class
                )
            )
            ->type(NacPortal::class, 1);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Get Org NAC Portal
     *
     * @param string $orgId
     * @param string $nacportalId
     *
     * @return NacPortal Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getOrgNacPortal(string $orgId, string $nacportalId): NacPortal
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/api/v1/orgs/{org_id}/nacportals/{nacportal_id}')
            ->auth('apiToken', 'basicAuth', Auth::and('basicAuth', 'csrfToken'))
            ->parameters(TemplateParam::init('org_id', $orgId), TemplateParam::init('nacportal_id', $nacportalId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Syntax', ApiV1OrgsNacportals400ErrorException::class))
            ->throwErrorOn('401', ErrorType::init('Unauthorized', ApiV1OrgsNacportals401ErrorException::class))
            ->throwErrorOn(
                '403',
                ErrorType::init('Permission Denied', ApiV1OrgsNacportals403ErrorException::class)
            )
            ->throwErrorOn(
                '404',
                ErrorType::init(
                    'Not found. The API endpoint doesnâ€™t exist or resource doesnâ€™ t exist',
                    ResponseHttp404Exception::class
                )
            )
            ->throwErrorOn(
                '429',
                ErrorType::init(
                    'Too Many Request. The API Token used for the request reached the 5000 API ' .
                    'Calls per hour threshold',
                    ApiV1OrgsNacportals429ErrorException::class
                )
            )
            ->type(NacPortal::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Update Org NAC Portal
     *
     * @param string $orgId
     * @param string $nacportalId
     * @param NacPortal|null $body
     *
     * @return NacPortal Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function updateOrgNacPortal(string $orgId, string $nacportalId, ?NacPortal $body = null): NacPortal
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/api/v1/orgs/{org_id}/nacportals/{nacportal_id}')
            ->auth('apiToken', 'basicAuth', Auth::and('basicAuth', 'csrfToken'))
            ->parameters(
                TemplateParam::init('org_id', $orgId),
                TemplateParam::init('nacportal_id', $nacportalId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Syntax', ApiV1OrgsNacportals400ErrorException::class))
            ->throwErrorOn('401', ErrorType::init('Unauthorized', ApiV1OrgsNacportals401ErrorException::class))
            ->throwErrorOn(
                '403',
                ErrorType::init('Permission Denied', ApiV1OrgsNacportals403ErrorException::class)
            )
            ->throwErrorOn(
                '404',
                ErrorType::init(
                    'Not found. The API endpoint doesnâ€™t exist or resource doesnâ€™ t exist',
                    ResponseHttp404Exception::class
                )
            )
            ->throwErrorOn(
                '429',
                ErrorType::init(
                    'Too Many Request. The API Token used for the request reached the 5000 API ' .
                    'Calls per hour threshold',
                    ApiV1OrgsNacportals429ErrorException::class
                )
            )
            ->type(NacPortal::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create Org NAC Portal
     *
     * @param string $orgId
     * @param NacPortal|null $body
     *
     * @return NacPortal Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createOrgNacPortal(string $orgId, ?NacPortal $body = null): NacPortal
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/api/v1/orgs/{org_id}/nacportals')
            ->auth('apiToken', 'basicAuth', Auth::and('basicAuth', 'csrfToken'))
            ->parameters(
                TemplateParam::init('org_id', $orgId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Syntax', ApiV1OrgsNacportals400ErrorException::class))
            ->throwErrorOn('401', ErrorType::init('Unauthorized', ApiV1OrgsNacportals401ErrorException::class))
            ->throwErrorOn(
                '403',
                ErrorType::init('Permission Denied', ApiV1OrgsNacportals403ErrorException::class)
            )
            ->throwErrorOn(
                '404',
                ErrorType::init(
                    'Not found. The API endpoint doesnâ€™t exist or resource doesnâ€™ t exist',
                    ResponseHttp404Exception::class
                )
            )
            ->throwErrorOn(
                '429',
                ErrorType::init(
                    'Too Many Request. The API Token used for the request reached the 5000 API ' .
                    'Calls per hour threshold',
                    ApiV1OrgsNacportals429ErrorException::class
                )
            )
            ->type(NacPortal::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Delete Org NAC Portal
     *
     * @param string $orgId
     * @param string $nacportalId
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function deleteOrgNacPortal(string $orgId, string $nacportalId): void
    {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::DELETE,
            '/api/v1/orgs/{org_id}/nacportals/{nacportal_id}'
        )
            ->auth('apiToken', 'basicAuth', Auth::and('basicAuth', 'csrfToken'))
            ->parameters(TemplateParam::init('org_id', $orgId), TemplateParam::init('nacportal_id', $nacportalId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Syntax', ApiV1OrgsNacportals400ErrorException::class))
            ->throwErrorOn('401', ErrorType::init('Unauthorized', ApiV1OrgsNacportals401ErrorException::class))
            ->throwErrorOn(
                '403',
                ErrorType::init('Permission Denied', ApiV1OrgsNacportals403ErrorException::class)
            )
            ->throwErrorOn(
                '404',
                ErrorType::init(
                    'Not found. The API endpoint doesnâ€™t exist or resource doesnâ€™ t exist',
                    ResponseHttp404Exception::class
                )
            )
            ->throwErrorOn(
                '429',
                ErrorType::init(
                    'Too Many Request. The API Token used for the request reached the 5000 API ' .
                    'Calls per hour threshold',
                    ApiV1OrgsNacportals429ErrorException::class
                )
            );

        $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Get List of Org NAC Portal SSO Latest Failures
     *
     * @param string $orgId
     * @param string $nacportalId
     * @param int|null $page
     * @param int|null $limit
     * @param int|null $start start datetime, can be epoch or relative time like -1d, -1w; -1d if
     *        not specified
     * @param int|null $end end datetime, can be epoch or relative time like -1d, -2h; now if not
     *        specified
     * @param string|null $duration duration like 7d, 2w
     *
     * @return ResponseSsoFailureSearch Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function listOrgNacPortalSsoLatestFailures(
        string $orgId,
        string $nacportalId,
        ?int $page = 1,
        ?int $limit = 100,
        ?int $start = null,
        ?int $end = null,
        ?string $duration = '1d'
    ): ResponseSsoFailureSearch {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/api/v1/orgs/{org_id}/nacportals/{nacportal_id}/failures'
        )
            ->auth('apiToken', 'basicAuth', Auth::and('basicAuth', 'csrfToken'))
            ->parameters(
                TemplateParam::init('org_id', $orgId),
                TemplateParam::init('nacportal_id', $nacportalId),
                QueryParam::init('page', $page),
                QueryParam::init('limit', $limit),
                QueryParam::init('start', $start),
                QueryParam::init('end', $end),
                QueryParam::init('duration', $duration)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init('Bad Syntax', ApiV1OrgsNacportalsFailures400ErrorException::class)
            )
            ->throwErrorOn(
                '401',
                ErrorType::init('Unauthorized', ApiV1OrgsNacportalsFailures401ErrorException::class)
            )
            ->throwErrorOn(
                '403',
                ErrorType::init('Permission Denied', ApiV1OrgsNacportalsFailures403ErrorException::class)
            )
            ->throwErrorOn(
                '404',
                ErrorType::init(
                    'Not found. The API endpoint doesnâ€™t exist or resource doesnâ€™ t exist',
                    ResponseHttp404Exception::class
                )
            )
            ->throwErrorOn(
                '429',
                ErrorType::init(
                    'Too Many Request. The API Token used for the request reached the 5000 API ' .
                    'Calls per hour threshold',
                    ApiV1OrgsNacportalsFailures429ErrorException::class
                )
            )
            ->type(ResponseSsoFailureSearch::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Update Org NAC Portal Template
     *
     * @param string $orgId
     * @param string $nacportalId
     * @param NacPortalTemplate|null $body
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function updateOrgNacPortalTempalte(
        string $orgId,
        string $nacportalId,
        ?NacPortalTemplate $body = null
    ): void {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::PUT,
            '/api/v1/orgs/{org_id}/nacportals/{nacportal_id}/portal_template'
        )
            ->auth('apiToken', 'basicAuth', Auth::and('basicAuth', 'csrfToken'))
            ->parameters(
                TemplateParam::init('org_id', $orgId),
                TemplateParam::init('nacportal_id', $nacportalId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init('Bad Syntax', ApiV1OrgsNacportalsPortalTemplate400ErrorException::class)
            )
            ->throwErrorOn(
                '401',
                ErrorType::init('Unauthorized', ApiV1OrgsNacportalsPortalTemplate401ErrorException::class)
            )
            ->throwErrorOn(
                '403',
                ErrorType::init('Permission Denied', ApiV1OrgsNacportalsPortalTemplate403ErrorException::class)
            )
            ->throwErrorOn(
                '404',
                ErrorType::init(
                    'Not found. The API endpoint doesnâ€™t exist or resource doesnâ€™ t exist',
                    ResponseHttp404Exception::class
                )
            )
            ->throwErrorOn(
                '429',
                ErrorType::init(
                    'Too Many Request. The API Token used for the request reached the 5000 API ' .
                    'Calls per hour threshold',
                    ApiV1OrgsNacportalsPortalTemplate429ErrorException::class
                )
            );

        $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Upload background image for NAC Portal
     *
     * @param string $orgId
     * @param string $nacportalId
     * @param FileWrapper|null $file Binary file
     * @param string|null $json JSON string describing the upload
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function uploadOrgNacPortalImage(
        string $orgId,
        string $nacportalId,
        ?FileWrapper $file = null,
        ?string $json = null
    ): void {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::POST,
            '/api/v1/orgs/{org_id}/nacportals/{nacportal_id}/portal_image'
        )
            ->auth('apiToken', 'basicAuth', Auth::and('basicAuth', 'csrfToken'))
            ->parameters(
                TemplateParam::init('org_id', $orgId),
                TemplateParam::init('nacportal_id', $nacportalId),
                FormParam::init('file', $file),
                FormParam::init('json', $json)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init('Bad Syntax', ApiV1OrgsNacportalsPortalImage400ErrorException::class)
            )
            ->throwErrorOn(
                '401',
                ErrorType::init('Unauthorized', ApiV1OrgsNacportalsPortalImage401ErrorException::class)
            )
            ->throwErrorOn(
                '403',
                ErrorType::init('Permission Denied', ApiV1OrgsNacportalsPortalImage403ErrorException::class)
            )
            ->throwErrorOn(
                '404',
                ErrorType::init(
                    'Not found. The API endpoint doesnâ€™t exist or resource doesnâ€™ t exist',
                    ResponseHttp404Exception::class
                )
            )
            ->throwErrorOn(
                '429',
                ErrorType::init(
                    'Too Many Request. The API Token used for the request reached the 5000 API ' .
                    'Calls per hour threshold',
                    ApiV1OrgsNacportalsPortalImage429ErrorException::class
                )
            );

        $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Delete background image for NAC Portal
     *
     *
     * If image is not uploaded or is deleted, NAC Portal will use default image.
     *
     * @param string $orgId
     * @param string $nacportalId
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function deleteOrgNacPortalImage(string $orgId, string $nacportalId): void
    {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::DELETE,
            '/api/v1/orgs/{org_id}/nacportals/{nacportal_id}/portal_image'
        )
            ->auth('apiToken', 'basicAuth', Auth::and('basicAuth', 'csrfToken'))
            ->parameters(TemplateParam::init('org_id', $orgId), TemplateParam::init('nacportal_id', $nacportalId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init('Bad Syntax', ApiV1OrgsNacportalsPortalImage400ErrorException::class)
            )
            ->throwErrorOn(
                '401',
                ErrorType::init('Unauthorized', ApiV1OrgsNacportalsPortalImage401ErrorException::class)
            )
            ->throwErrorOn(
                '403',
                ErrorType::init('Permission Denied', ApiV1OrgsNacportalsPortalImage403ErrorException::class)
            )
            ->throwErrorOn(
                '404',
                ErrorType::init(
                    'Not found. The API endpoint doesnâ€™t exist or resource doesnâ€™ t exist',
                    ResponseHttp404Exception::class
                )
            )
            ->throwErrorOn(
                '429',
                ErrorType::init(
                    'Too Many Request. The API Token used for the request reached the 5000 API ' .
                    'Calls per hour threshold',
                    ApiV1OrgsNacportalsPortalImage429ErrorException::class
                )
            );

        $this->execute($_reqBuilder, $_resHandler);
    }
}
