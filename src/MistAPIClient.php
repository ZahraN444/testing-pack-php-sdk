<?php

declare(strict_types=1);

/*
 * MistAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace MistAPILib;

use Core\ClientBuilder;
use Core\Utils\CoreHelper;
use MistAPILib\Authentication\ApiTokenCredentials;
use MistAPILib\Authentication\ApiTokenCredentialsBuilder;
use MistAPILib\Authentication\ApiTokenManager;
use MistAPILib\Authentication\BasicAuthCredentials;
use MistAPILib\Authentication\BasicAuthCredentialsBuilder;
use MistAPILib\Authentication\BasicAuthManager;
use MistAPILib\Authentication\CsrfTokenCredentials;
use MistAPILib\Authentication\CsrfTokenCredentialsBuilder;
use MistAPILib\Authentication\CsrfTokenManager;
use MistAPILib\Controllers\OrgsNACPortalsController;
use MistAPILib\Controllers\OrgsNACTagsController;
use MistAPILib\Utils\CompatibilityConverter;
use Unirest\Configuration;
use Unirest\HttpClient;

class MistAPIClient implements ConfigurationInterface
{
    private $orgsNACTags;

    private $orgsNACPortals;

    private $apiTokenManager;

    private $basicAuthManager;

    private $csrfTokenManager;

    private $config;

    private $client;

    /**
     * @see MistAPIClientBuilder::init()
     * @see MistAPIClientBuilder::build()
     *
     * @param array $config
     */
    public function __construct(array $config = [])
    {
        $this->config = array_merge(ConfigurationDefaults::_ALL, CoreHelper::clone($config));
        $this->apiTokenManager = new ApiTokenManager($this->config);
        $this->basicAuthManager = new BasicAuthManager($this->config);
        $this->csrfTokenManager = new CsrfTokenManager($this->config);
        $this->client = ClientBuilder::init(new HttpClient(Configuration::init($this)))
            ->converter(new CompatibilityConverter())
            ->jsonHelper(ApiHelper::getJsonHelper())
            ->apiCallback($this->config['httpCallback'] ?? null)
            ->userAgent('APIMATIC 3.0')
            ->serverUrls(self::ENVIRONMENT_MAP[$this->getEnvironment()], Server::DEFAULT_)
            ->authManagers([
                'apiToken' => $this->apiTokenManager,
                'basicAuth' => $this->basicAuthManager,
                'csrfToken' => $this->csrfTokenManager
            ])
            ->build();
    }

    /**
     * Create a builder with the current client's configurations.
     *
     * @return MistAPIClientBuilder MistAPIClientBuilder instance
     */
    public function toBuilder(): MistAPIClientBuilder
    {
        $builder = MistAPIClientBuilder::init()
            ->timeout($this->getTimeout())
            ->enableRetries($this->shouldEnableRetries())
            ->numberOfRetries($this->getNumberOfRetries())
            ->retryInterval($this->getRetryInterval())
            ->backOffFactor($this->getBackOffFactor())
            ->maximumRetryWaitTime($this->getMaximumRetryWaitTime())
            ->retryOnTimeout($this->shouldRetryOnTimeout())
            ->httpStatusCodesToRetry($this->getHttpStatusCodesToRetry())
            ->httpMethodsToRetry($this->getHttpMethodsToRetry())
            ->environment($this->getEnvironment())
            ->httpCallback($this->config['httpCallback'] ?? null);

        $apiToken = $this->getApiTokenCredentialsBuilder();
        if ($apiToken != null) {
            $builder->apiTokenCredentials($apiToken);
        }

        $basicAuth = $this->getBasicAuthCredentialsBuilder();
        if ($basicAuth != null) {
            $builder->basicAuthCredentials($basicAuth);
        }

        $csrfToken = $this->getCsrfTokenCredentialsBuilder();
        if ($csrfToken != null) {
            $builder->csrfTokenCredentials($csrfToken);
        }
        return $builder;
    }

    public function getTimeout(): int
    {
        return $this->config['timeout'] ?? ConfigurationDefaults::TIMEOUT;
    }

    public function shouldEnableRetries(): bool
    {
        return $this->config['enableRetries'] ?? ConfigurationDefaults::ENABLE_RETRIES;
    }

    public function getNumberOfRetries(): int
    {
        return $this->config['numberOfRetries'] ?? ConfigurationDefaults::NUMBER_OF_RETRIES;
    }

    public function getRetryInterval(): float
    {
        return $this->config['retryInterval'] ?? ConfigurationDefaults::RETRY_INTERVAL;
    }

    public function getBackOffFactor(): float
    {
        return $this->config['backOffFactor'] ?? ConfigurationDefaults::BACK_OFF_FACTOR;
    }

    public function getMaximumRetryWaitTime(): int
    {
        return $this->config['maximumRetryWaitTime'] ?? ConfigurationDefaults::MAXIMUM_RETRY_WAIT_TIME;
    }

    public function shouldRetryOnTimeout(): bool
    {
        return $this->config['retryOnTimeout'] ?? ConfigurationDefaults::RETRY_ON_TIMEOUT;
    }

    public function getHttpStatusCodesToRetry(): array
    {
        return $this->config['httpStatusCodesToRetry'] ?? ConfigurationDefaults::HTTP_STATUS_CODES_TO_RETRY;
    }

    public function getHttpMethodsToRetry(): array
    {
        return $this->config['httpMethodsToRetry'] ?? ConfigurationDefaults::HTTP_METHODS_TO_RETRY;
    }

    public function getEnvironment(): string
    {
        return $this->config['environment'] ?? ConfigurationDefaults::ENVIRONMENT;
    }

    public function getApiTokenCredentials(): ApiTokenCredentials
    {
        return $this->apiTokenManager;
    }

    public function getApiTokenCredentialsBuilder(): ?ApiTokenCredentialsBuilder
    {
        if (empty($this->apiTokenManager->getAuthorization())) {
            return null;
        }
        return ApiTokenCredentialsBuilder::init($this->apiTokenManager->getAuthorization());
    }

    public function getBasicAuthCredentials(): BasicAuthCredentials
    {
        return $this->basicAuthManager;
    }

    public function getBasicAuthCredentialsBuilder(): ?BasicAuthCredentialsBuilder
    {
        if (empty($this->basicAuthManager->getUsername()) && empty($this->basicAuthManager->getPassword())) {
            return null;
        }
        return BasicAuthCredentialsBuilder::init(
            $this->basicAuthManager->getUsername(),
            $this->basicAuthManager->getPassword()
        );
    }

    public function getCsrfTokenCredentials(): CsrfTokenCredentials
    {
        return $this->csrfTokenManager;
    }

    public function getCsrfTokenCredentialsBuilder(): ?CsrfTokenCredentialsBuilder
    {
        if (empty($this->csrfTokenManager->getXCSRFToken())) {
            return null;
        }
        return CsrfTokenCredentialsBuilder::init($this->csrfTokenManager->getXCSRFToken());
    }

    /**
     * Get the client configuration as an associative array
     *
     * @see MistAPIClientBuilder::getConfiguration()
     */
    public function getConfiguration(): array
    {
        return $this->toBuilder()->getConfiguration();
    }

    /**
     * Clone this client and override given configuration options
     *
     * @see MistAPIClientBuilder::build()
     */
    public function withConfiguration(array $config): self
    {
        return new self(array_merge($this->config, $config));
    }

    /**
     * Get the base uri for a given server in the current environment.
     *
     * @param string $server Server name
     *
     * @return string Base URI
     */
    public function getBaseUri(string $server = Server::DEFAULT_): string
    {
        return $this->client->getGlobalRequest($server)->getQueryUrl();
    }

    /**
     * Returns Orgs NAC Tags Controller
     */
    public function getOrgsNACTagsController(): OrgsNACTagsController
    {
        if ($this->orgsNACTags == null) {
            $this->orgsNACTags = new OrgsNACTagsController($this->client);
        }
        return $this->orgsNACTags;
    }

    /**
     * Returns Orgs NAC Portals Controller
     */
    public function getOrgsNACPortalsController(): OrgsNACPortalsController
    {
        if ($this->orgsNACPortals == null) {
            $this->orgsNACPortals = new OrgsNACPortalsController($this->client);
        }
        return $this->orgsNACPortals;
    }

    /**
     * A map of all base urls used in different environments and servers
     *
     * @var array
     */
    private const ENVIRONMENT_MAP = [
        Environment::PRODUCTION => [Server::DEFAULT_ => 'https://api.mist.com'],
        Environment::ENVIRONMENT2 => [Server::DEFAULT_ => 'https://api.gc1.mist.com'],
        Environment::ENVIRONMENT3 => [Server::DEFAULT_ => 'https://api.ac2.mist.com'],
        Environment::ENVIRONMENT4 => [Server::DEFAULT_ => 'https://api.gc2.mist.com'],
        Environment::ENVIRONMENT5 => [Server::DEFAULT_ => 'https://api.eu.mist.com'],
        Environment::ENVIRONMENT6 => [Server::DEFAULT_ => 'https://api.gc3.mist.com'],
        Environment::ENVIRONMENT7 => [Server::DEFAULT_ => 'https://api.ac6.mist.com'],
        Environment::ENVIRONMENT8 => [Server::DEFAULT_ => 'https://api.ac5.mist.com']
    ];
}
