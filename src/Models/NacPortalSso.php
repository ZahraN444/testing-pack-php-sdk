<?php

declare(strict_types=1);

/*
 * MistAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace MistAPILib\Models;

use stdClass;

class NacPortalSso implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $idpCert;

    /**
     * @var string|null
     */
    private $idpSignAlgo;

    /**
     * @var string|null
     */
    private $idpSsoUrl;

    /**
     * @var string|null
     */
    private $issuer;

    /**
     * @var string|null
     */
    private $nameidFormat;

    /**
     * @var NacPortalSsoRoleMatching[]|null
     */
    private $ssoRoleMatching;

    /**
     * @var bool|null
     */
    private $useSsoRoleForCert;

    /**
     * Returns Idp Cert.
     */
    public function getIdpCert(): ?string
    {
        return $this->idpCert;
    }

    /**
     * Sets Idp Cert.
     *
     * @maps idp_cert
     */
    public function setIdpCert(?string $idpCert): void
    {
        $this->idpCert = $idpCert;
    }

    /**
     * Returns Idp Sign Algo.
     */
    public function getIdpSignAlgo(): ?string
    {
        return $this->idpSignAlgo;
    }

    /**
     * Sets Idp Sign Algo.
     *
     * @maps idp_sign_algo
     */
    public function setIdpSignAlgo(?string $idpSignAlgo): void
    {
        $this->idpSignAlgo = $idpSignAlgo;
    }

    /**
     * Returns Idp Sso Url.
     */
    public function getIdpSsoUrl(): ?string
    {
        return $this->idpSsoUrl;
    }

    /**
     * Sets Idp Sso Url.
     *
     * @maps idp_sso_url
     */
    public function setIdpSsoUrl(?string $idpSsoUrl): void
    {
        $this->idpSsoUrl = $idpSsoUrl;
    }

    /**
     * Returns Issuer.
     */
    public function getIssuer(): ?string
    {
        return $this->issuer;
    }

    /**
     * Sets Issuer.
     *
     * @maps issuer
     */
    public function setIssuer(?string $issuer): void
    {
        $this->issuer = $issuer;
    }

    /**
     * Returns Nameid Format.
     */
    public function getNameidFormat(): ?string
    {
        return $this->nameidFormat;
    }

    /**
     * Sets Nameid Format.
     *
     * @maps nameid_format
     */
    public function setNameidFormat(?string $nameidFormat): void
    {
        $this->nameidFormat = $nameidFormat;
    }

    /**
     * Returns Sso Role Matching.
     *
     * @return NacPortalSsoRoleMatching[]|null
     */
    public function getSsoRoleMatching(): ?array
    {
        return $this->ssoRoleMatching;
    }

    /**
     * Sets Sso Role Matching.
     *
     * @maps sso_role_matching
     *
     * @param NacPortalSsoRoleMatching[]|null $ssoRoleMatching
     */
    public function setSsoRoleMatching(?array $ssoRoleMatching): void
    {
        $this->ssoRoleMatching = $ssoRoleMatching;
    }

    /**
     * Returns Use Sso Role for Cert.
     * if it's desired to inject a role into Cert's Subject (so it can be used later on in policy)
     */
    public function getUseSsoRoleForCert(): ?bool
    {
        return $this->useSsoRoleForCert;
    }

    /**
     * Sets Use Sso Role for Cert.
     * if it's desired to inject a role into Cert's Subject (so it can be used later on in policy)
     *
     * @maps use_sso_role_for_cert
     */
    public function setUseSsoRoleForCert(?bool $useSsoRoleForCert): void
    {
        $this->useSsoRoleForCert = $useSsoRoleForCert;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->idpCert)) {
            $json['idp_cert']              = $this->idpCert;
        }
        if (isset($this->idpSignAlgo)) {
            $json['idp_sign_algo']         = $this->idpSignAlgo;
        }
        if (isset($this->idpSsoUrl)) {
            $json['idp_sso_url']           = $this->idpSsoUrl;
        }
        if (isset($this->issuer)) {
            $json['issuer']                = $this->issuer;
        }
        if (isset($this->nameidFormat)) {
            $json['nameid_format']         = $this->nameidFormat;
        }
        if (isset($this->ssoRoleMatching)) {
            $json['sso_role_matching']     = $this->ssoRoleMatching;
        }
        if (isset($this->useSsoRoleForCert)) {
            $json['use_sso_role_for_cert'] = $this->useSsoRoleForCert;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
