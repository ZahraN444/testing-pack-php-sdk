<?php

declare(strict_types=1);

/*
 * MistAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace MistAPILib\Models;

use stdClass;

class NacPortal implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $accessType;

    /**
     * @var string|null
     */
    private $bgImageUrl;

    /**
     * @var int|null
     */
    private $certExpireTime;

    /**
     * @var bool|null
     */
    private $enableTelemetry;

    /**
     * @var int|null
     */
    private $expiryNotificationTime;

    /**
     * @var NacPortalSso|null
     */
    private $guestPortalConfig;

    /**
     * @var string|null
     */
    private $name;

    /**
     * @var bool|null
     */
    private $notifyExpiry;

    /**
     * @var string|null
     */
    private $ssid;

    /**
     * @var NacPortalSso|null
     */
    private $sso;

    /**
     * @var string|null
     */
    private $templateUrl;

    /**
     * @var string|null
     */
    private $thumbnailUrl;

    /**
     * @var string|null
     */
    private $tos;

    /**
     * @var string|null
     */
    private $type;

    /**
     * Returns Access Type.
     */
    public function getAccessType(): ?string
    {
        return $this->accessType;
    }

    /**
     * Sets Access Type.
     *
     * @maps access_type
     * @factory \MistAPILib\Models\NacPortalAccessTypeEnum::checkValue
     */
    public function setAccessType(?string $accessType): void
    {
        $this->accessType = $accessType;
    }

    /**
     * Returns Bg Image Url.
     * background image
     */
    public function getBgImageUrl(): ?string
    {
        return $this->bgImageUrl;
    }

    /**
     * Sets Bg Image Url.
     * background image
     *
     * @maps bg_image_url
     */
    public function setBgImageUrl(?string $bgImageUrl): void
    {
        $this->bgImageUrl = $bgImageUrl;
    }

    /**
     * Returns Cert Expire Time.
     * in days
     */
    public function getCertExpireTime(): ?int
    {
        return $this->certExpireTime;
    }

    /**
     * Sets Cert Expire Time.
     * in days
     *
     * @maps cert_expire_time
     */
    public function setCertExpireTime(?int $certExpireTime): void
    {
        $this->certExpireTime = $certExpireTime;
    }

    /**
     * Returns Enable Telemetry.
     * model, version, fingering, events (connecting, disconnect, roaming), which ap
     */
    public function getEnableTelemetry(): ?bool
    {
        return $this->enableTelemetry;
    }

    /**
     * Sets Enable Telemetry.
     * model, version, fingering, events (connecting, disconnect, roaming), which ap
     *
     * @maps enable_telemetry
     */
    public function setEnableTelemetry(?bool $enableTelemetry): void
    {
        $this->enableTelemetry = $enableTelemetry;
    }

    /**
     * Returns Expiry Notification Time.
     * in days
     */
    public function getExpiryNotificationTime(): ?int
    {
        return $this->expiryNotificationTime;
    }

    /**
     * Sets Expiry Notification Time.
     * in days
     *
     * @maps expiry_notification_time
     */
    public function setExpiryNotificationTime(?int $expiryNotificationTime): void
    {
        $this->expiryNotificationTime = $expiryNotificationTime;
    }

    /**
     * Returns Guest Portal Config.
     */
    public function getGuestPortalConfig(): ?NacPortalSso
    {
        return $this->guestPortalConfig;
    }

    /**
     * Sets Guest Portal Config.
     *
     * @maps guest_portal_config
     */
    public function setGuestPortalConfig(?NacPortalSso $guestPortalConfig): void
    {
        $this->guestPortalConfig = $guestPortalConfig;
    }

    /**
     * Returns Name.
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     *
     * @maps name
     */
    public function setName(?string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Notify Expiry.
     * phase 2
     */
    public function getNotifyExpiry(): ?bool
    {
        return $this->notifyExpiry;
    }

    /**
     * Sets Notify Expiry.
     * phase 2
     *
     * @maps notify_expiry
     */
    public function setNotifyExpiry(?bool $notifyExpiry): void
    {
        $this->notifyExpiry = $notifyExpiry;
    }

    /**
     * Returns Ssid.
     */
    public function getSsid(): ?string
    {
        return $this->ssid;
    }

    /**
     * Sets Ssid.
     *
     * @maps ssid
     */
    public function setSsid(?string $ssid): void
    {
        $this->ssid = $ssid;
    }

    /**
     * Returns Sso.
     */
    public function getSso(): ?NacPortalSso
    {
        return $this->sso;
    }

    /**
     * Sets Sso.
     *
     * @maps sso
     */
    public function setSso(?NacPortalSso $sso): void
    {
        $this->sso = $sso;
    }

    /**
     * Returns Template Url.
     */
    public function getTemplateUrl(): ?string
    {
        return $this->templateUrl;
    }

    /**
     * Sets Template Url.
     *
     * @maps template_url
     */
    public function setTemplateUrl(?string $templateUrl): void
    {
        $this->templateUrl = $templateUrl;
    }

    /**
     * Returns Thumbnail Url.
     */
    public function getThumbnailUrl(): ?string
    {
        return $this->thumbnailUrl;
    }

    /**
     * Sets Thumbnail Url.
     *
     * @maps thumbnail_url
     */
    public function setThumbnailUrl(?string $thumbnailUrl): void
    {
        $this->thumbnailUrl = $thumbnailUrl;
    }

    /**
     * Returns Tos.
     */
    public function getTos(): ?string
    {
        return $this->tos;
    }

    /**
     * Sets Tos.
     *
     * @maps tos
     */
    public function setTos(?string $tos): void
    {
        $this->tos = $tos;
    }

    /**
     * Returns Type.
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     *
     * @maps type
     * @factory \MistAPILib\Models\NacPortalTypeEnum::checkValue
     */
    public function setType(?string $type): void
    {
        $this->type = $type;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->accessType)) {
            $json['access_type']              = NacPortalAccessTypeEnum::checkValue($this->accessType);
        }
        if (isset($this->bgImageUrl)) {
            $json['bg_image_url']             = $this->bgImageUrl;
        }
        if (isset($this->certExpireTime)) {
            $json['cert_expire_time']         = $this->certExpireTime;
        }
        if (isset($this->enableTelemetry)) {
            $json['enable_telemetry']         = $this->enableTelemetry;
        }
        if (isset($this->expiryNotificationTime)) {
            $json['expiry_notification_time'] = $this->expiryNotificationTime;
        }
        if (isset($this->guestPortalConfig)) {
            $json['guest_portal_config']      = $this->guestPortalConfig;
        }
        if (isset($this->name)) {
            $json['name']                     = $this->name;
        }
        if (isset($this->notifyExpiry)) {
            $json['notify_expiry']            = $this->notifyExpiry;
        }
        if (isset($this->ssid)) {
            $json['ssid']                     = $this->ssid;
        }
        if (isset($this->sso)) {
            $json['sso']                      = $this->sso;
        }
        if (isset($this->templateUrl)) {
            $json['template_url']             = $this->templateUrl;
        }
        if (isset($this->thumbnailUrl)) {
            $json['thumbnail_url']            = $this->thumbnailUrl;
        }
        if (isset($this->tos)) {
            $json['tos']                      = $this->tos;
        }
        if (isset($this->type)) {
            $json['type']                     = NacPortalTypeEnum::checkValue($this->type);
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
