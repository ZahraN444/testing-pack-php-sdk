<?php

declare(strict_types=1);

/*
 * MistAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace MistAPILib\Models;

use stdClass;

class NacRuleMatching implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $authType;

    /**
     * @var string[]|null
     */
    private $nactags;

    /**
     * @var string[]|null
     */
    private $portTypes;

    /**
     * @var string[]|null
     */
    private $siteIds;

    /**
     * @var string[]|null
     */
    private $sitegroupIds;

    /**
     * @var string[]|null
     */
    private $vendor;

    /**
     * Returns Auth Type.
     */
    public function getAuthType(): ?string
    {
        return $this->authType;
    }

    /**
     * Sets Auth Type.
     *
     * @maps auth_type
     * @factory \MistAPILib\Models\NacRuleMatchingAuthTypeEnum::checkValue
     */
    public function setAuthType(?string $authType): void
    {
        $this->authType = $authType;
    }

    /**
     * Returns Nactags.
     *
     * @return string[]|null
     */
    public function getNactags(): ?array
    {
        return $this->nactags;
    }

    /**
     * Sets Nactags.
     *
     * @maps nactags
     *
     * @param string[]|null $nactags
     */
    public function setNactags(?array $nactags): void
    {
        $this->nactags = $nactags;
    }

    /**
     * Returns Port Types.
     *
     * @return string[]|null
     */
    public function getPortTypes(): ?array
    {
        return $this->portTypes;
    }

    /**
     * Sets Port Types.
     *
     * @maps port_types
     * @factory \MistAPILib\Models\NacRuleMatchingPortTypeEnum::checkValue
     *
     * @param string[]|null $portTypes
     */
    public function setPortTypes(?array $portTypes): void
    {
        $this->portTypes = $portTypes;
    }

    /**
     * Returns Site Ids.
     * list of site ids to match
     *
     * @return string[]|null
     */
    public function getSiteIds(): ?array
    {
        return $this->siteIds;
    }

    /**
     * Sets Site Ids.
     * list of site ids to match
     *
     * @maps site_ids
     *
     * @param string[]|null $siteIds
     */
    public function setSiteIds(?array $siteIds): void
    {
        $this->siteIds = $siteIds;
    }

    /**
     * Returns Sitegroup Ids.
     * list of sitegroup ids to match
     *
     * @return string[]|null
     */
    public function getSitegroupIds(): ?array
    {
        return $this->sitegroupIds;
    }

    /**
     * Sets Sitegroup Ids.
     * list of sitegroup ids to match
     *
     * @maps sitegroup_ids
     *
     * @param string[]|null $sitegroupIds
     */
    public function setSitegroupIds(?array $sitegroupIds): void
    {
        $this->sitegroupIds = $sitegroupIds;
    }

    /**
     * Returns Vendor.
     * list of vendors to match
     *
     * @return string[]|null
     */
    public function getVendor(): ?array
    {
        return $this->vendor;
    }

    /**
     * Sets Vendor.
     * list of vendors to match
     *
     * @maps vendor
     *
     * @param string[]|null $vendor
     */
    public function setVendor(?array $vendor): void
    {
        $this->vendor = $vendor;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->authType)) {
            $json['auth_type']     = NacRuleMatchingAuthTypeEnum::checkValue($this->authType);
        }
        if (isset($this->nactags)) {
            $json['nactags']       = $this->nactags;
        }
        if (isset($this->portTypes)) {
            $json['port_types']    = NacRuleMatchingPortTypeEnum::checkValue($this->portTypes);
        }
        if (isset($this->siteIds)) {
            $json['site_ids']      = $this->siteIds;
        }
        if (isset($this->sitegroupIds)) {
            $json['sitegroup_ids'] = $this->sitegroupIds;
        }
        if (isset($this->vendor)) {
            $json['vendor']        = $this->vendor;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
