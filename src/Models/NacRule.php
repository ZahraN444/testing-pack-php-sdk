<?php

declare(strict_types=1);

/*
 * MistAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace MistAPILib\Models;

use stdClass;

class NacRule implements \JsonSerializable
{
    /**
     * @var string
     */
    private $action;

    /**
     * @var string[]|null
     */
    private $applyTags;

    /**
     * @var float|null
     */
    private $createdTime;

    /**
     * @var bool|null
     */
    private $enabled = true;

    /**
     * @var string|null
     */
    private $id;

    /**
     * @var NacRuleMatching|null
     */
    private $matching;

    /**
     * @var float|null
     */
    private $modifiedTime;

    /**
     * @var string
     */
    private $name;

    /**
     * @var NacRuleMatching|null
     */
    private $notMatching;

    /**
     * @var int|null
     */
    private $order;

    /**
     * @var string|null
     */
    private $orgId;

    /**
     * @param string $action
     * @param string $name
     */
    public function __construct(string $action, string $name)
    {
        $this->action = $action;
        $this->name = $name;
    }

    /**
     * Returns Action.
     */
    public function getAction(): string
    {
        return $this->action;
    }

    /**
     * Sets Action.
     *
     * @required
     * @maps action
     * @factory \MistAPILib\Models\NacRuleActionEnum::checkValue
     */
    public function setAction(string $action): void
    {
        $this->action = $action;
    }

    /**
     * Returns Apply Tags.
     * all optional, this goes into Access-Accept
     *
     * @return string[]|null
     */
    public function getApplyTags(): ?array
    {
        return $this->applyTags;
    }

    /**
     * Sets Apply Tags.
     * all optional, this goes into Access-Accept
     *
     * @maps apply_tags
     *
     * @param string[]|null $applyTags
     */
    public function setApplyTags(?array $applyTags): void
    {
        $this->applyTags = $applyTags;
    }

    /**
     * Returns Created Time.
     */
    public function getCreatedTime(): ?float
    {
        return $this->createdTime;
    }

    /**
     * Sets Created Time.
     *
     * @maps created_time
     */
    public function setCreatedTime(?float $createdTime): void
    {
        $this->createdTime = $createdTime;
    }

    /**
     * Returns Enabled.
     * enabled or not
     */
    public function getEnabled(): ?bool
    {
        return $this->enabled;
    }

    /**
     * Sets Enabled.
     * enabled or not
     *
     * @maps enabled
     */
    public function setEnabled(?bool $enabled): void
    {
        $this->enabled = $enabled;
    }

    /**
     * Returns Id.
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     *
     * @maps id
     */
    public function setId(?string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Matching.
     */
    public function getMatching(): ?NacRuleMatching
    {
        return $this->matching;
    }

    /**
     * Sets Matching.
     *
     * @maps matching
     */
    public function setMatching(?NacRuleMatching $matching): void
    {
        $this->matching = $matching;
    }

    /**
     * Returns Modified Time.
     */
    public function getModifiedTime(): ?float
    {
        return $this->modifiedTime;
    }

    /**
     * Sets Modified Time.
     *
     * @maps modified_time
     */
    public function setModifiedTime(?float $modifiedTime): void
    {
        $this->modifiedTime = $modifiedTime;
    }

    /**
     * Returns Name.
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     *
     * @required
     * @maps name
     */
    public function setName(string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Not Matching.
     */
    public function getNotMatching(): ?NacRuleMatching
    {
        return $this->notMatching;
    }

    /**
     * Sets Not Matching.
     *
     * @maps not_matching
     */
    public function setNotMatching(?NacRuleMatching $notMatching): void
    {
        $this->notMatching = $notMatching;
    }

    /**
     * Returns Order.
     * the order of the rule, lower value implies higher priority
     */
    public function getOrder(): ?int
    {
        return $this->order;
    }

    /**
     * Sets Order.
     * the order of the rule, lower value implies higher priority
     *
     * @maps order
     */
    public function setOrder(?int $order): void
    {
        $this->order = $order;
    }

    /**
     * Returns Org Id.
     */
    public function getOrgId(): ?string
    {
        return $this->orgId;
    }

    /**
     * Sets Org Id.
     *
     * @maps org_id
     */
    public function setOrgId(?string $orgId): void
    {
        $this->orgId = $orgId;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['action']            = NacRuleActionEnum::checkValue($this->action);
        if (isset($this->applyTags)) {
            $json['apply_tags']    = $this->applyTags;
        }
        if (isset($this->createdTime)) {
            $json['created_time']  = $this->createdTime;
        }
        if (isset($this->enabled)) {
            $json['enabled']       = $this->enabled;
        }
        if (isset($this->id)) {
            $json['id']            = $this->id;
        }
        if (isset($this->matching)) {
            $json['matching']      = $this->matching;
        }
        if (isset($this->modifiedTime)) {
            $json['modified_time'] = $this->modifiedTime;
        }
        $json['name']              = $this->name;
        if (isset($this->notMatching)) {
            $json['not_matching']  = $this->notMatching;
        }
        if (isset($this->order)) {
            $json['order']         = $this->order;
        }
        if (isset($this->orgId)) {
            $json['org_id']        = $this->orgId;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
